// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetflixRareBackend;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetflixRareBackend.Migrations
{
    [DbContext(typeof(RareDbContext))]
    [Migration("20240313020139_SeedDataFix")]
    partial class SeedDataFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NetflixRareBackend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Art"
                        });
                });

            modelBuilder.Entity("NetflixRareBackend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Author_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created_On")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Post_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author_Id = 1,
                            Content = "Really insightful article, thanks for sharing!",
                            Created_On = new DateTime(2024, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Post_Id = 2
                        },
                        new
                        {
                            Id = 2,
                            Author_Id = 2,
                            Content = "I never knew quantum computing was so fascinating.",
                            Created_On = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Post_Id = 1
                        });
                });

            modelBuilder.Entity("NetflixRareBackend.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<int>("Category_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image_Url")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Publication_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = false,
                            Category_Id = 2,
                            Content = "Quantum computing is set to revolutionize the way we solve complex problems. This post delves into the basics of quantum theory and its application in computing.",
                            Image_Url = "https://example.com/quantum.jpg",
                            Publication_Date = new DateTime(2024, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dawn of Quantum Computing",
                            User_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Approved = true,
                            Category_Id = 1,
                            Content = "Neural networks have become a cornerstone of modern AI. This post explores how these networks mimic the human brain to process information.",
                            Image_Url = "https://example.com/neural_networks.jpg",
                            Publication_Date = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Exploring the Depths of the Neural Networks",
                            User_Id = 2
                        });
                });

            modelBuilder.Entity("NetflixRareBackend.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image_Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image_Url = "like.png",
                            Label = "Like"
                        },
                        new
                        {
                            Id = 2,
                            Image_Url = "love.png",
                            Label = "Love"
                        },
                        new
                        {
                            Id = 3,
                            Image_Url = "haha.png",
                            Label = "Haha"
                        });
                });

            modelBuilder.Entity("NetflixRareBackend.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Author_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created_On")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Ended_On")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Follower_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author_Id = 1,
                            Created_On = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Follower_Id = 2
                        },
                        new
                        {
                            Id = 2,
                            Author_Id = 2,
                            Created_On = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ended_On = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Follower_Id = 3
                        },
                        new
                        {
                            Id = 3,
                            Author_Id = 3,
                            Created_On = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Follower_Id = 1
                        });
                });

            modelBuilder.Entity("NetflixRareBackend.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Informative"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Quick Read"
                        });
                });

            modelBuilder.Entity("NetflixRareBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created_On")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Is_Staff")
                        .HasColumnType("boolean");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profile_Image_Url")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Bio = "I'm a weird little freak",
                            Created_On = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dj1946@yahoo.com",
                            First_Name = "Django",
                            Is_Staff = true,
                            Last_Name = "Reinhardt",
                            Profile_Image_Url = "https://tse3.mm.bing.net/th?id=OIP.RFj9Podx_VZPomRF-Eu_xQHaHa&pid=Api&P=0&h=220",
                            Uid = "ZP734FG"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Bio = "I'm a hot tomato",
                            Created_On = new DateTime(2023, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ritaskeeta@hotmail.com",
                            First_Name = "Rita",
                            Is_Staff = true,
                            Last_Name = "Hayworth",
                            Profile_Image_Url = "https://tse3.mm.bing.net/th?id=OIP.gODAc8rZRPjtRWthtwjA-AHaKK&pid=Api&P=0&h=220",
                            Uid = "PG5H372"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Bio = "I'm a songstress",
                            Created_On = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "midnighttrain@gmail.com",
                            First_Name = "Gladys",
                            Is_Staff = true,
                            Last_Name = "Knight",
                            Profile_Image_Url = "https://tse3.mm.bing.net/th?id=OIP.IKtEhuzNEmbk6cdHtqpYYAHaLc&pid=Api&P=0&h=220",
                            Uid = "A83D98K"
                        });
                });

            modelBuilder.Entity("PostReaction", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("integer");

                    b.Property<int>("ReactionsId")
                        .HasColumnType("integer");

                    b.HasKey("PostsId", "ReactionsId");

                    b.HasIndex("ReactionsId");

                    b.ToTable("PostReaction");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("PostReaction", b =>
                {
                    b.HasOne("NetflixRareBackend.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixRareBackend.Models.Reaction", null)
                        .WithMany()
                        .HasForeignKey("ReactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("NetflixRareBackend.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixRareBackend.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
